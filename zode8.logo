TO interpBinop :binop :val1 :val2
  case :binop [
    ['+ if ( and ( ( item 1 :val1 ) = 'numv ) ( item 1 :val2 ) = 'numv ) 
      output ( item 2 :val1 ) + ( item 2 :val2 ) ]
    ['- if ( and ( ( item 1 :val1 ) = 'numv ) ( item 1 :val2 ) = 'numv ) 
      output ( item 2 :val1 ) - ( item 2 :val2 ) ]
    ['* if ( and ( ( item 1 :val1 ) = 'numv ) ( item 1 :val2 ) = 'numv ) 
      output ( item 2 :val1 ) * ( item 2 :val2 ) ]
    [ ELSE output 'unimplemented_binop ]
  ]
END

to interp :exprc :env 
case item 1 :exprc [ 
    [ ['numc] output ( list ''numv item 2 :exprc ) ]
    ;these appc cases totally aren't efficient
    [ ['appc] case ( item 2 :exprc ) [
        [[['idc '+]] output ( list ''numv 
          ( interpBinop '+ ( interp item 1 item 3 :exprc :env ) ( interp item 2 item 3 :exprc :env ) ) )]
        [[['idc '-]] output ( list ''numv 
          ( interpBinop '- ( interp item 1 item 3 :exprc :env ) ( interp item 2 item 3 :exprc :env ) ) )]
        [[['idc '*]] output ( list ''numv 
          ( interpBinop '* ( interp item 1 item 3 :exprc :env ) ( interp item 2 item 3 :exprc :env ) ) )]
        [ELSE 'weird_appc]
    [else 'unimplemented]
]]
    [ else output 'unimplemented ] ]
end

TO serialize :value
  case item 1 :value [
    [ ['numv] show word word '" ( item 2 :value ) '"]
    [ ['boolv] show word word '" ( item 2 :value ) '"]
    [ ['primv] show '"#<primop>"]
    [ ['closv] show '"#<procedure>"]
    [ ELSE show '"other_value?"]
  ]
END

to main
  make 'env ( list ( list 'true true ) ( list 'false false ) )
  ;test expressions
  make 'expr_num_1 ['numc 4]
  make 'expr_add_1 ['appc ['idc '+] [['numc 5] ['numc 7]]]
  make 'expr_sub_1 ['appc ['idc '-] [['numc 9] ['numc 4]]]
  make 'expr_mul_1 ['appc ['idc '*] [['numc 4] ['numc 4]]]
  ;switch out the exprc here
  serialize (interp :expr_sub_1 :env)
end

main
